// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.7.0'
    ext.compose_compiler_version = '1.2.0'
    ext.compose_version = '1.2.0-rc03'
    ext.androidx_test_version = '1.4.0'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
        classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.5.0'
        classpath 'com.hiya:jacoco-android:0.2'
    }
}

plugins {
    id 'org.jetbrains.dokka' version '1.5.0'
}

ext.projectArtifactId = { project ->
    if (project.name == 'maps-compose' || project.name == 'maps-compose-widgets') {
        return project.name
    } else {
        return null
    }
}

allprojects {
    group = 'com.google.maps.android'
    version = '2.5.3'
    project.ext.artifactId = rootProject.ext.projectArtifactId(project)
}

/**
 * Publishing and signing info
 */
subprojects { project ->
    if (project.ext.artifactId == null) return

    apply plugin: 'com.android.library'
    apply plugin: 'com.hiya.jacoco-android'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'signing'

    // Code coverage
    jacoco {
        toolVersion = "0.8.7"
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.source
        archiveClassifier.set("sources")
    }

    task javadocJar(type: Jar) {
        dependsOn(tasks.named("dokkaHtml"))
        dependsOn(tasks.named("dokkaJavadoc"))
        archiveClassifier.set("javadoc")
        from new File(buildDir, "dokka/javadoc")
    }

    publishing {
        publications {
            aar(MavenPublication) {
                groupId project.group
                artifactId project.ext.artifactId
                version project.version

                pom {
                    name = project.name
                    description = "Jetpack Compose components for the Maps SDK for Android"
                    url = "https://github.com/googlemaps/android-maps-compose"
                    scm {
                        connection = 'scm:git@github.com:googlemaps/android-maps-compose.git'
                        developerConnection = 'scm:git@github.com:googlemaps/android-maps-compose.git'
                        url = 'https://github.com/googlemaps/android-maps-compose'
                    }

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    organization {
                        name = 'Google Inc'
                        url = 'http://developers.google.com/maps'
                    }

                    developers {
                        developer {
                            name = 'Google Inc.'
                        }
                    }
                }

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.api.allDependencies.each { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }

                afterEvaluate {
                    artifact "$buildDir/outputs/aar/$project.name-release.aar"
                    artifact javadocJar
                    artifact sourcesJar
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                name = "mavencentral"
                url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.aar
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
